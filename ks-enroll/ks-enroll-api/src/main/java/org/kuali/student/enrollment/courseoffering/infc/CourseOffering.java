/**
 * Copyright 2010 The Kuali Foundation Licensed under the Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain a copy of the License at
 * http://www.osedu.org/licenses/ECL-2.0 Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and limitations under the License.
 */

package org.kuali.student.enrollment.courseoffering.infc;

import java.util.List;

import org.kuali.student.enrollment.lui.infc.LuiInstructor;
import org.kuali.student.r2.common.infc.HasId;
import org.kuali.student.r2.common.infc.RichText;
import org.kuali.student.r2.common.infc.TimeAmount;
import org.kuali.student.r2.common.infc.TypeStateEntity;
import org.kuali.student.r2.lum.lrc.infc.ResultValuesGroup;
import org.kuali.student.r2.lum.lu.dto.ExpenditureInfo;
import org.kuali.student.r2.lum.lu.dto.RevenueInfo;
import org.kuali.student.r2.lum.lu.infc.Fee;
/**
 * 
 * @author Kamal
 */

public interface CourseOffering extends HasId, TypeStateEntity {

    
    /**
     * The system assigned unique id to identify this Course Offering.
     * Could be implemented as as sequence number or as a UUID.
     *
     * Attempts to set this value on creates should result in a ReadOnlyException being thrown
     *
     * An Id:<ul>
     * <li>An id is used when the actual value is unimportant and can therefore be a large hex value for example
     * <li>An id value might be 23b9ca9bd203df902
     * <li>An Id is never intended to be used directly by an end user.
     * <li>Ids are assumed to be of different values in different KS implementations
     * <li>Id values are generated by the service implementations
     * <li>Id values are never expected to be used in Configuration or Application code
     * </ul>
     * @name Unique Id
     * @readOnly
     * @required on updates
     * @impl maps to a lui id with the type of Course Offering
     */
    @Override
    public String getId();
    
     /**
     * Unique identifier for the type of this course offering.
     * @name Type Key
     * @readOnly on updates
     * @required
     * @impl must be the lui type for a course offering
     */

    @Override
    public String getTypeKey();
    
     /**
     * Unique identifier for the state of this course offering.
     * i.e. draft, submitted, approved, offered, canceled, etc
     * 
     * @name State Key
     * @required
     * @impl maps to the states that are defined in the kuali.course.offering.process with an initial state of draft
     */

    @Override
    public String getStateKey();
    
    /**
     * A description of this Course Offering.
     * 
     * This starts out the same as the canonical description from the catalog but then, 
     * depending on the configuration, it may be overwritten, changed, or expanded upon.
     * 
     * @name Description
     * @impl initially this is copied from the canonical course description and then updated and stored in the Lui description.
     */

    public RichText getDescr();
    
    
    /**
     * Activity Offerings for the course offering
     * 
     * This field is not directly updatable, use #createActivityOffering 
     * and #deleteActivityOffering to manage this list of activity offering ids.
     * 
     * @name Activity Offering Ids
     * @readOnly
     * @required
     * @impl must map to the version dependent id
     */
    public List<String> getActivityOfferingIds();
    
    /**
     * Registration Groups for the course offering
     * This field is not directly updatable, use #createRegistrationGroup 
     * and #deleteRegistrationGroup to manage this list of registration group ids.
     * @name Registration Group Ids
     * @readOnly
     * @required
     * @impl must map to the version dependent id
     */
    public List<String> getRegistrationGroupIds();
    
    
    /**
     * Academic term of course offering
     * @name Term Key
     * @readOnly
     * @required
     * @impl set during the #createCourseOfferingFromCanonical and then maps to the aptKey on the Lui
     */
    public String getTermKey();
    
    /**
     * A unique identifier assigned to all approved courses that exist in the catalog
     * 
     * This is not updatable once initialized.
     * 
     * @name Course Id
     * @readOnly
     * @required
     * @impl this maps the the version dependent id as the offering must point to one and only one version of the course
     */
    public String getCourseId();
                
    /**
     * Identifiers for formats from the canonical course that will be offered as part of the course offering
     * 
     * This is not updatable once initialized.
     * 
     * @name Format Ids
     * @readOnly
     * @required
     * @impl this maps to the version dependent id of the format as this must point to one and only one version of the course
     */
    public List<String> getFormatIds();
    
    /**
     * Identifies the number of a course as reflected in the course catalog.
     * 
     * This typically must be unique across all courses offered during that term.
     * If the user wants to create two separate offerings for the same course they must modify this 
     * code to make it unique.  For example: An on-line offering of the course might have an "O" appended to it
     * to distinguish it from the face to face offering, i.e. ENG101 and ENG101O
     * 
     * Initially copied from the course catalog but then, depending on the configuration it may be updatable.
     * 
     * Often this field is configured so that it is not not directly updatable but rather 
     * is calculated from it's two constituent parts, the subject area and the course number suffix.
     * For example: Subject Area = "ENG" and Suffix = "101" then code = "ENG101"
     * 
     * @name Course Code
     * @impl initialially this is copied from the course catalog code but then is subsequently stored in the lui.
     */
    public String getCourseCode();

    /**
     * Identifies the department and/subject code of the course as reflected in the course catalog.
     * 
     * Initially copied from the course catalog but then, depending on the configuration it may be updatable.
     * 
     * In most configurations this should not be updatable.
     * 
     * Often used in the calculation of the courseCode
     * 
     * @name Subject Area
     * @impl initially copied from the canonical course but then stored in the Lui identifier division field (?) not the study subject area (?)
     */
    public String getSubjectArea();
    
    /**
     * A suffix of the course number as reflected in the college catalog.
     * 
     * This is the "number" portion of the course code.
     * 
     * Initially copied from the course catalog but then, depending on the configuration it may be updatable.
     * 
     * This field is often configured to be updatable but the updates typically simply append something like an "O" for on-line
     * to it to differentiate multiple course offerings for the same course.
     * 
     * Often used in the calculation of the courseCode.
     * 
     * @name Course Number Suffix
     * @impl initially copied from the canonical course but then stored in the Lui identifier suffix field.
     */
    public String getCourseNumberSuffix();
        

    
    /**
     * Name of the course used in the college catalog.
     * 
     * Initially copied from the course catalog but then, depending on the configuration it may be updatable.
     * 
     * For regular courses this is not generally allowed to be updated on the offering, but for special topics courses 
     * this is often overridden to capture the particular topic being taught offered this term.
     * 
     * Note: the configuration of the validation for titles is typically restricted to exclude line breaks.  This may have to be loosened
     * as some schools may want the particular topic to appear on a 2nd line. For example:
     * SPECIAL TOPICS:
     * AN EXPLORATION OF DEEP SPACE ARTIFACTS
     * 
     * @name Course Title 
     * @impl initially copied from the canonical course but then stored in the Lui identifier title field (or is it the name field?).
     */
    public String getCourseTitle();
           
    /**
     * Indicates that the entire course offering is an Honors Course
     * 
     * ??? Is this an enrollment restriction rule or a flag or both? 
     * 
     * @name Is Honors Offering
     * @impl store in a generic lui luCodes type of field?
     */
    public Boolean getIsHonorsOffering();

    /**
     * Total maximum number of "seats" or enrollment slots that can be filled for the offering. 
     * Calculated based on sum of all the maximum seats of primary activity type offerings.
     * @name Maximum Enrollment
     * @impl maps to Lui.maximumEnrollment
     * @readOnly
     */
    public Integer getMaximumEnrollment();

    /** 
     * Total minimum number of seats that must be filled for the offering not to be canceled. 
     * Calculated based on sum of all the minimum seats of primary activity type offerings
     * @name Minimum  Enrollment
     * @impl maps to Lui.minimumEnrollment
     * @readOnly
     */
    public Integer getMinimumEnrollment();

    
    /**
     * The unique identifier of the other course offerings with which this offering is joint-listed
     * 
     * WARNING: ???? I don't think we discussed this.  Joint means that this course meets in the same space as another course.  
     * Is that captured at this level or only at the activity levels
     * 
     * @name Joint Offering Ids
     * @readOnly I think?
     * @impl initially copied from the canonical course joints then????
     */
    public List<String> getJointOfferingIds();
    
    /******** Assessment Information ***************/
    /**
     * The options/scales that indicate the allowable grades that can be awarded.
     * 
     * Typically the values here are constrained by the values on the canonical course.
     * 
     * If the value is set here then the Clu must have a grading option set on the
     * canonical activity. 
     * 
     * For example: an id might point to Pass/Fail or Letter Graded option.
     * 
     * TODO: rename to make it more clear these are IDs, getGradingOptionIds?
     * 
     * @name: Grading Options
     * @impl these are actually ids to ResultValuesGroup
     */
    public List<String> getGradingOptions();
    
    /**
     * Type of credit of course offering. 
     *  
     * This field is initially copied from the canonical course but then, depending on configuration, it may be updated. 
     * 
     * TODO: figure out which of the credit options will be copied down because the canonical has more than one!
     * 
     * Often it is just a fixed single value but a ResultValuesGroup could contain
     * a range (with increments) or even a discrete list of possible credit values.
     * @name Credit Options
     * @impl if the application specifies a 
     */    
    public ResultValuesGroup getCreditOptions();
    
    /**
     * Key indicating the level at which grade rosters should be generated - activity, format or course.
     * 
     * TODO: change the name of this field to make it clear this is key that is stored in the type system.
     * TODO: define these types.
     * TODO: add a service method to get the list of types that can be put in this field.
     * 
     * 
     * @name Grade Roster Level Key
     * @impl this should be a constrained the a list types generated from the roster types from the generic type system.
     */
    public String getGradeRosterLevel();
    
        
    /******** Personnel Information *****************/
    
    /**
     * Instructors for this course offering
     * 
     * TODO: ???? Decide how to stored this info.  I though instructors are supposed to be stored in an LPR but then I see this structure which 
     * looks a lot like the CluInstructor but with a percentage of effort. Also does the business want to allow an unknown person to be added in at 
     * the offering level (the LuiInstructor has personOverride info). Needs more discussion.
     * 
     * TODO: find out if the canonical instructors should be copied down
     * 
     * @name Instructors
     * @impl ????
     */
    public List<? extends LuiInstructor> getInstructors();
    
    
    /********* Organization Information **************/
    
    /**
     * Organization(s) that is responsible for administering the course delivery - and all associated logistics - of the course
     * 
     * Initially copied from the canonical course then, depending on the configuration, updated
     * 
     * This is typically an academic department but could be for example the extended studies office that is responsible for delivering the course 
     * even though it's content is managed by an academic department.
     * 
     * TODO: this is a list of Org Ids so we should change the name to better reflect this, getUnitsDeploymentIds 
     * TODO: revisit the name how about just getAdministeringOrgIds
     * 
     * @name Units Deployment
     * @impl initalized from canonical course units deployment but then stored in lui units deployment
     */
    public List<String> getUnitsDeployment();
    
    /**
     * Organization(s) that is responsible for the academic content of the course as approved in its canonical form.
     * This is the organization that has oversight of the curriculum.
     * 
     * This is typically an academic department.
     * 
     * TODO: rename this to make it more clear it contains a list of Org Ids, i.e. getUnitsContentOwner
     * 
     * @name Units Content Owner
     * @readOnly
     * @impl this is never updatable so it should just be grabbed from the canonical course
     */
    public List<String> getUnitsContentOwner();
    
    
    /********** Final Exam Information *****************/
    
    /**
     * Indicates whether a final exam is to be given
     * 
     * Initially copied from the canonical course and then, depending on configuration, updated.
     * 
     * TODO: figure out how to store this?  LuCodes again? or does setting this to true create another Lui of type = "Final Exam" that way
     * we can (eventually) store the date and time of the final exam on that Lui.
     * 
     * TODO: should we rename this field?  Since it is a Boolean shouldn't it be getHasFinalExam, status implies more values.
     * 
     * @name Final Exam Status
     * @impl This is not currently a field on the canonical Course so schools like UCB are storing this as a dynamic attribute on the Course
     */
    public Boolean getFinalExamStatus();
    
    /*********** Waitlist *****************************/
    
    /**
     * Indicates whether a RegistrationGroup has a waitlist
     * TODO: figure out how to store this
     * TODO: make sure we are consistent on how we spell Waitlist, should be spelled Waitlist, or Wait List or Wait-List (as the merriam-webster has it)
     * @name Has Waitlist
     * @impl not sure how to store this, it depends on how we end up implementing waitlists.
     */
    public Boolean getHasWaitlist();

    /**
     * Indicates the type of waitlist as it relates to processing students on and off
     * The three types predefined in kuali are Automatic, Semi-Automatic and Manual
     * 
     * TODO: Right not Waitlist types are not tied to any Waitlist object so we need to define an "other key" to get the list of valid values from the type service.
     * TODO: Decide if we need a separate getHasWaitList, perhaps no value in this field means no waitlist.
     * TODO: Cross validate with hasWaitlist
     * 
     * @name Waitlist Type Key
     * @impl TODO: decide if this this should be stored on the Lui or on a waitlist object?
     */
    public String getWaitlistTypeKey();

    /**
     * Maximum number of students to be allowed on the wait list
     * 
     * @name Waitlist Maximum
     * @impl TODO: decide if this this should be stored on the Lui or on a waitlist object?
     */
    public Integer getWaitlistMaximum();    
    
    /**
     * Indicates if the waitlist requires checkin
     * @name Is Waitlist Checkin Required
     * @impl TODO: decide if this this should be stored on the Lui or on a waitlist object?
     */
    public Boolean getIsWaitlistCheckinRequired();
    
    /**
     * Frequency for the waitlist checkin
     * @name Waitlist Checkin Frequency 
     * @impl TODO: decide if this this should be stored on the Lui or on a waitlist object?
     */
    public TimeAmount getWaitlistCheckinFrequency();
    
    
    /************* Finances ***************************/
    
    /**
     * The primary source of funding for the offering.
     * TODO: decide what this really should be? Is it an orgId? 
     * The example values from ATEAM are Self-support & State- support
     * @name Funding Source
     * @impl TODO figure this out
     */
    public String getFundingSource();
    
    /*
     * TODO: Change CourseFeeInfo, CourseRevenueInfo and CourseExpenditureInfo to interfaces 
     * after course service is migrated to 1.3
     */
    
    /**
     * Fees associated with the course offering. 
     * 
     * Initially copied from the course catalog but then, depending on the configuration it may be updatable.
     * 
     * @name Fees
     * @impl initially copied from canonical CourseFeeInfo but subsequently stored on the lui
     */    
    public List<? extends Fee> getFees();
    
    /**
     * Organization(s) that receives the revenue from fees associated with the course offering
     * 
     * Initially copied from the course catalog but then, depending on the configuration it may be updatable.
     * 
     * @name Revenues
     * @impl initially copied from cannonical CourseRevenueInfo but then subsequently stored on the Lui
     */
    public List<RevenueInfo> getRevenues();
    
    
    /**
     * Organization(s) that incurs the cost associated with the course offering
     * 
     * Initially copied from the course catalog but then, depending on the configuration it may be updatable.
     * 
     * @name Expenditure
     * @impl initially copied from cannonical CourseRevenueInfo but then subsequently stored on the Lui
     */
    public ExpenditureInfo getExpenditure();
        
    /**
     * Flag indicating whether a course is eligible for Financial Aid. Derived from course catalog (canonical)
     * 
     * TODO: find a place to store this on the canonical course because it does not currently exist there
     * TODO: Decide if this is really a rule or a CluSet or what?
     * 
     * @name Is Financial Aid Eligible
     * @impl TODO: decide where to store
     */
    public Boolean getIsFinancialAidEligible();
    
    /************* Miscellaneous **********************/
    
    /**
     * Specifies whether the selection of RegistrationGroup that students register for will be done as a 
     * block (all activities together) or in a sequential order of activities
     * 
     * The two types that have been predefined are "All" and "Sequenced": 
     * All: When a student registers for this course she gets registered for all sections identified by the reg. group 
     * Sequenced: When a student registers for this course she must register first for the primary section identified and then any secondary sections 
     * 
     * TODO: We have NOT fully figured out how to do sequences in course registration
     * 
     * @name Registration Order Type Key 
     */
    public String getRegistrationOrderTypeKey();
        
}
