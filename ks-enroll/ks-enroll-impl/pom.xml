<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <artifactId>ks-enroll-impl</artifactId>
  <name>KS Enroll Impl</name>
  <version>1.3.0-merge-SNAPSHOT</version>
  <description>KS Enrollment Impl</description>
  <parent>
    <groupId>org.kuali.student.enroll</groupId>
    <artifactId>ks-enroll</artifactId>
    <version>1.3.0-merge-SNAPSHOT</version>
  </parent>
	<!--
  <profiles>
    <profile>
      <id>ks-hibernate</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.kuali.student.common</groupId>
          <artifactId>ks-hibernate</artifactId>
          <type>pom</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>
	</profiles>
	-->
    <build>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <!--
          Setting forkMode to always. Multiple dao tests using Spring
          junit class runner doesn't play nice with each other
          -->
          <configuration>
            <forkMode>always</forkMode>
            <argLine>-Xms256m -Xmx512m</argLine>
          </configuration>
        </plugin>
      </plugins>
    </build>
	<dependencies>
			<dependency>
				<groupId>org.kuali.student.enroll</groupId>
				<artifactId>ks-enroll-api</artifactId>
				<version>${project.version}</version>
			</dependency>

            <!-- Added test jar to be able to wire in mock services, remove after actual implementations are complete -->
			<dependency>
				<groupId>org.kuali.student.enroll</groupId>
				<artifactId>ks-enroll-api</artifactId>
				<version>${project.version}</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			 <dependency>
            <groupId>org.kuali.student.core</groupId>
            <artifactId>ks-core-api</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.lum</groupId>
            <artifactId>ks-lum-api</artifactId>
            <version>${project.version}</version>
        </dependency>
		       <dependency>
            <groupId>org.kuali.student.lum</groupId>
            <artifactId>ks-lum-impl</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.common</groupId>
            <artifactId>ks-common-api</artifactId>
            <version>${project.version}</version>
        </dependency>
		 <dependency>
        <groupId>org.kuali.student.common</groupId>
        <artifactId>ks-jta</artifactId>
        <version>${project.version}</version>
        <type>pom</type>
      </dependency>
			<dependency>
				<groupId>org.kuali.student.common</groupId>
				<artifactId>ks-hibernate</artifactId>
				<version>${project.version}</version>
				<type>pom</type>
				<scope>test</scope>
			</dependency>
			<dependency>
					<groupId>antlr</groupId>
					<artifactId>antlr</artifactId>
					<version>2.7.7</version>
					<scope>test</scope>
			</dependency>
			<!-- Add to be able to use LuDao on LuService as per discussion with Kamal -->
			<dependency>
				<groupId>org.kuali.student.common</groupId>
				<artifactId>ks-common-test</artifactId>
				<version>${project.version}</version>
				<scope>test</scope>
			</dependency>
			
    </dependencies>
</project>
